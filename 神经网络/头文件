import numpy
# 激活函数
import scipy.special
# 数组
#import matplotlib.pyplot
#%matplotlib inline
#绘图

#类定义
class neuralNetwork:
    
    
    # 初始化
    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):
        # 三层网络
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        
        # 权重矩阵wih and who，第一行是前一层所有节点对这一层第一个节点的权重，以此类推 
        #正态分布初始化权重
        self.wih = numpy.random.normal(0.0, pow(self.inodes, -0.5), (self.hnodes, self.inodes))
        self.who = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.onodes, self.hnodes))

        # 学习率
        self.lr = learningrate
        
        # 激活函数S
        self.activation_function = lambda x: scipy.special.expit(x)
        
        pass

    
    # 训练神经网络
    def train(self, inputs_list, targets_list):
        # 根据前面权重矩阵定义必须转置
        inputs = numpy.array(inputs_list, ndmin=2).T
        targets = numpy.array(targets_list, ndmin=2).T
        
        # 根据权重进行分配
        hidden_inputs = numpy.dot(self.wih, inputs)
        # 通过激活函数S
        hidden_outputs = self.activation_function(hidden_inputs)
        
        # 同理
        final_inputs = numpy.dot(self.who, hidden_outputs)
        final_outputs = self.activation_function(final_inputs)
        
        # 误差
        output_errors = targets - final_outputs
        # 根据权重分配误差
        hidden_errors = numpy.dot(self.who.T, output_errors) 
        
        # 调整权重
        self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs))
        
        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))
        
        pass

    
    # 查询结果
    def query(self, inputs_list):
        inputs = numpy.array(inputs_list, ndmin=2).T
        
        hidden_inputs = numpy.dot(self.wih, inputs)
        hidden_outputs = self.activation_function(hidden_inputs)
        
        final_inputs = numpy.dot(self.who, hidden_outputs)
        final_outputs = self.activation_function(final_inputs)
        
        return final_outputs
